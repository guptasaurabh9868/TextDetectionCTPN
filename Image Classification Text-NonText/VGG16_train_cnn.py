# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mVNP_yUElfn2BM-FuR0LJNVhryvibPfv
"""

# import the necessary packages
from keras.models import Sequential
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.layers.core import Activation
from keras.layers.core import Flatten
from keras.layers.core import Dense
from keras import backend as K

class LeNet:
	@staticmethod
	def build(width, height, depth, classes):
		# initialize the model
		model = Sequential()
		inputShape = (height, width, depth)

		# if we are using "channels first", update the input shape
		if K.image_data_format() == "channels_first":
			inputShape = (depth, height, width)

		# first set of CONV => RELU => POOL layers
		model.add(Conv2D(64, (3, 3), padding="same",
			input_shape=inputShape))
		model.add(Activation("relu"))

		model.add(Conv2D(64, (3, 3), padding="same",input_shape=inputShape))
		model.add(Activation("relu"))
		model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))

		# second set of CONV => RELU => POOL layers
		model.add(Conv2D(128, (3, 3), padding="same"))
		model.add(Activation("relu"))

		model.add(Conv2D(128, (3, 3), padding="same"))
		model.add(Activation("relu"))

		model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))

		# Third set of CONV => RELU => POOL layers
		model.add(Conv2D(256, (3, 3), padding="same"))
		model.add(Activation("relu"))

		model.add(Conv2D(256, (3, 3), padding="same"))
		model.add(Activation("relu"))

		model.add(Conv2D(256, (3, 3), padding="same"))
		model.add(Activation("relu"))
		
		model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))

		# Forth set of CONV => RELU => POOL layers
		model.add(Conv2D(512, (3, 3), padding="same"))
		model.add(Activation("relu"))

		model.add(Conv2D(512, (3, 3), padding="same"))
		model.add(Activation("relu"))

		model.add(Conv2D(512, (3, 3), padding="same"))
		model.add(Activation("relu"))
		
		model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))

		# Fifth set of CONV => RELU => POOL layers
		model.add(Conv2D(512, (3, 3), padding="same"))
		model.add(Activation("relu"))

		model.add(Conv2D(512, (3, 3), padding="same"))
		model.add(Activation("relu"))

		model.add(Conv2D(512, (3, 3), padding="same"))
		model.add(Activation("relu"))
		
# 		model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))	

		# first (and only) set of FC => RELU layers
		model.add(Flatten())
		
		model.add(Dense(4096))
		model.add(Activation("relu"))

		model.add(Dense(4096))
		model.add(Activation("relu"))

		# softmax classifier
		model.add(Dense(classes))
		model.add(Activation("softmax"))

		# return the constructed network architecture
		return model

# USAGE
# python train_network.py --dataset images --model santa_not_santa.model

# set the matplotlib backend so figures can be saved in the background
import matplotlib
matplotlib.use("Agg")

# import the necessary packages
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam
from sklearn.model_selection import train_test_split
from keras.preprocessing.image import img_to_array
from keras.utils import to_categorical
# from pyimagesearch.lenet import LeNet
from imutils import paths
import matplotlib.pyplot as plt
import numpy as np
import argparse
import random
import cv2
import os

# # construct the argument parse and parse the arguments
# ap = argparse.ArgumentParser()
# ap.add_argument("-d", "--dataset", required=True,
# 	help="path to input dataset")
# ap.add_argument("-m", "--model", required=True,
# 	help="path to output model")
# ap.add_argument("-p", "--plot", type=str, default="plot.png",
# 	help="path to output loss/accuracy plot")
# args = vars(ap.parse_args())

# initialize the number of epochs to train for, initia learning rate,
# and batch size
EPOCHS = 30
INIT_LR = 1e-3
BS = 32

# initialize the data and labels
print("[INFO] loading images...")
data = []
labels = []

# grab the image paths and randomly shuffle them
# imagePaths = sorted(list(paths.list_images("drive/Colab_Notebooks/images/")))
imagePaths = "images/"
# random.seed(42)
# random.shuffle(imagePaths)
print(imagePaths)
# loop over the input images
for imagePath in imagePaths:
  print(imagePath)
  image = cv2.imread(imagePath)
  image = cv2.resize(image, (48, 48))
  image = img_to_array(image)
  data.append(image)

  # extract the class label from the image path and update the
  # labels list
  label = imagePath.split(os.path.sep)[-2]
  label = 1 if label == "santa" else 0
  labels.append(label)

# scale the raw pixel intensities to the range [0, 1]
data = np.array(data, dtype="float") / 255.0
labels = np.array(labels)

# partition the data into training and testing splits using 75% of
# the data for training and the remaining 25% for testing
(trainX, testX, trainY, testY) = train_test_split(data,
	labels, test_size=0.25, random_state=42)

# convert the labels from integers to vectors
trainY = to_categorical(trainY, num_classes=2)
testY = to_categorical(testY, num_classes=2)

# construct the image generator for data augmentation
aug = ImageDataGenerator(rotation_range=30, width_shift_range=0.1,
	height_shift_range=0.1, shear_range=0.2, zoom_range=0.2,
	horizontal_flip=True, fill_mode="nearest")

# initialize the model
print("[INFO] compiling model...")
model = LeNet.build(width=48, height=48, depth=3, classes=2)
opt = Adam(lr=INIT_LR, decay=INIT_LR / EPOCHS)
model.compile(loss="binary_crossentropy", optimizer=opt,
	metrics=["accuracy"])


print (trainX)




# train the network
print("[INFO] training network...")
H = model.fit_generator(aug.flow(trainX, trainY, batch_size=BS),
	validation_data=(testX, testY), steps_per_epoch=len(trainX) // BS,
	epochs=EPOCHS, verbose=1)

# save the model to disk
print("[INFO] serializing network...")
# print("Model :" + args['model'])
model.save("drive/Colab_Notebooks/cnn_models")
print("Model saved")


# plot the training loss and accuracy
plt.style.use("ggplot")
plt.figure()
N = EPOCHS
plt.plot(np.arange(0, N), H.history["loss"], label="train_loss")
plt.plot(np.arange(0, N), H.history["val_loss"], label="val_loss")
plt.plot(np.arange(0, N), H.history["acc"], label="train_acc")
plt.plot(np.arange(0, N), H.history["val_acc"], label="val_acc")
plt.title("Training Loss and Accuracy on Santa/Not Santa")
plt.xlabel("Epoch #")
plt.ylabel("Loss/Accuracy")
plt.legend(loc="lower left")
plt.savefig(args["plot"])

!apt-get install -y -qq software-properties-common python-software-properties module-init-tools
!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null
!apt-get update -qq 2>&1 > /dev/null
!apt-get -y install -qq google-drive-ocamlfuse fuse
from google.colab import auth
auth.authenticate_user()
from oauth2client.client import GoogleCredentials
creds = GoogleCredentials.get_application_default()
import getpass
!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL
vcode = getpass.getpass()
!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}

!mkdir -p drive
!google-drive-ocamlfuse drive

ls